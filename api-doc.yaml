openapi: '3.0.0'
info:
  version: 0.1.0
  title: ReleaseManager
tags:
  - name: Ping
  - name: Settings
  - name: Users
  - name: Projects
  - name: Project environments
  - name: Project invitations
  - name: Project members
  - name: Project GitHub repo
  - name: Releases
  - name: Deployments
  - name: Webhooks

paths:
  /ping:
    get:
      tags:
        - Ping
      responses:
        204:
          description: 'API is running'
  /settings:
    get:
      summary: "Get settings values"
      tags:
        - Settings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Settings fetched'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '400':
            $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
            $ref: '#/components/responses/UnauthorizedErrorResponse'
    patch:
      summary: 'Update organization settings'
      security:
        - bearerAuth: []
      tags:
        - Settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
      responses:
        '200':
          description: 'Settings updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '422':
              $ref: '#/components/responses/UnprocesssableEntityResponse'
  /auth/user:
    get:
      summary: "Get authenticated user"
      security:
        - bearerAuth: []
      tags:
        - Users
      responses:
        '200':
          description: 'User fetched'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
            $ref: '#/components/responses/UnauthorizedErrorResponse'
  /admin/users:
    get:
      summary: "List organization's users"
      security:
        - bearerAuth: []
      tags:
        - Users
      responses:
        '200':
          description: 'Users fetched'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401':
            $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
            $ref: '#/components/responses/ForbiddenErrorResponse'
  /admin/users/{user-id}:
    get:
      summary: "Get user by ID"
      security:
        - bearerAuth: []
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: 'User fetched'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
              $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
              $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
              $ref: '#/components/responses/NotFoundErrorResponse'
    delete:
      summary: "Delete user"
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '204':
          description: 'User deleted'
        '401':
              $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
              $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
              $ref: '#/components/responses/NotFoundErrorResponse'

  /projects:
    post:
      tags:
        - Projects
      summary: 'Create project'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        '201':
          description: 'Project created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
            $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
            $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
            $ref: '#/components/responses/ForbiddenErrorResponse'
    get:
      summary: "List projects for user"
      security:
        - bearerAuth: []
      tags:
        - Projects
      responses:
        '200':
          description: 'Projects fetched'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
        '401':
              $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
              $ref: '#/components/responses/ForbiddenErrorResponse'
  /projects/{project-id}:
    get:
      security:
        - bearerAuth: []
      summary: 'Get project by ID'
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      responses:
        '200':
          description: 'Project fetched'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
            $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
            $ref: '#/components/responses/UnauthorizedErrorResponse'
        '404':
            $ref: '#/components/responses/NotFoundErrorResponse'
    patch:
      security:
        - bearerAuth: []
      summary: 'Update project'
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        '200':
          description: 'Project updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '401':
              $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
              $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
              $ref: '#/components/responses/NotFoundErrorResponse'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      summary: 'Delete project'
      responses:
        '204':
          description: 'Project deleted'
        '401':
              $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
              $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
              $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/{project-id}/environments:
    post:
      tags:
        - Project environments
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      summary: 'Create environment'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentRequest'
      responses:
        '201':
          description: 'Environment created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
    get:
      security:
        - bearerAuth: [ ]
      summary: 'Get environments for project'
      tags:
        - Project environments
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
        - $ref: '#/components/parameters/EnvIdParam'
      responses:
        '200':
          description: 'Environment fetched'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/{project-id}/environments/{environment_id}:
    get:
      security:
        - bearerAuth: [ ]
      summary: 'Get environment'
      tags:
        - Project environments
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
        - $ref: '#/components/parameters/EnvIdParam'
      responses:
        '200':
          description: 'Environment fetched'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
    patch:
      security:
        - bearerAuth: []
      summary: 'Update environment'
      tags:
        - Project environments
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
        - $ref: '#/components/parameters/EnvIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentRequest'
      responses:
        '200':
          description: 'Environment updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Project environments
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
        - $ref: '#/components/parameters/EnvIdParam'
      summary: 'Delete environment'
      responses:
        '204':
          description: 'Environment deleted'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/{project-id}/invitations:
    post:
      summary: 'Invite user to a project'
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInvitationRequest'
      security:
        - bearerAuth: []
      tags:
        - Project invitations
      responses:
        '202':
          description: 'Invitation created, email will be sent to user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectInvitationResponse'
        '400':
              $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
              $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
              $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
              $ref: '#/components/responses/NotFoundErrorResponse'
        '422':
              $ref: '#/components/responses/UnprocesssableEntityResponse'
        '409':
          description: 'User is already a member or invitation has been sent'
          content:
            application/json:
              example:
                error: "User is already project memeber."
    get:
      summary: "List project's pending invitations"
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      security:
        - bearerAuth: []
      tags:
        - Project invitations
      responses:
        '200':
          description: 'Invitations fetched'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectInvitationResponse'
        '401':
              $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
              $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
              $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/{project-id}/invitations/{invitation-id}:
    delete:
      summary: 'Delete invitation'
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
        - $ref: '#/components/parameters/InvitationIdParam'
      security:
        - bearerAuth: []
      tags:
        - Project invitations
      responses:
        '204':
          description: 'Invitation deleted'
        '401':
            $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
            $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
            $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/invitations/accept:
    get:
      summary: 'Accept invitation'
      parameters:
        - $ref: '#/components/parameters/InvitationToken'
      tags:
        - Project invitations
      responses:
        '202':
          description: 'Invitation accepted'
        '404':
            $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/invitations/reject:
    get:
      summary: 'Reject invitation'
      parameters:
        - $ref: '#/components/parameters/InvitationToken'
      tags:
        - Project invitations
      responses:
        '204':
          description: 'Invitation rejected'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/{project-id}/members:
    get:
      summary: "List project's members"
      security:
        - bearerAuth: []
      tags:
        - Project members
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      responses:
        '200':
          description: 'Members fetched'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMemberResponse'
        '401':
              $ref: '#/components/responses/UnauthorizedErrorResponse'
        '404':
              $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/{project-id}/members/{user-id}:
    patch:
      summary: "Change member's role"
      security:
        - bearerAuth: []
      tags:
        - Project members
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMemberRole'
      responses:
        '200':
          description: 'Member role updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberResponse'
        '400':
            $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
            $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
            $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
            $ref: '#/components/responses/NotFoundErrorResponse'
        '422':
            $ref: '#/components/responses/UnprocesssableEntityResponse'
    delete:
      summary: 'Remove user from project'
      security:
        - bearerAuth: []
      tags:
        - Project members
      parameters:
        - $ref: '#/components/parameters/MemberIdParam'
      responses:
        '204':
          description: 'User removed from project'
        '401':
              $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
              $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
              $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/{project-id}/github-repo:
    post:
      summary: 'Set GitHub repo for the project'
      security:
        - bearerAuth: [ ]
      tags:
        - Project GitHub repo
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectGithubRepoRequest'
      responses:
        '204':
          description: 'GitHub repo set'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
    get:
      summary: "Get project's GitHub repo"
      security:
        - bearerAuth: []
      tags:
        - Project GitHub repo
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      responses:
        '200':
          description: 'GitHub repo fetched'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGithubRepoResponse'
        '401':
            $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
            $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
            $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/{project-id}/github-repo/tags:
    get:
      summary: 'List GitHub repo tags'
      security:
        - bearerAuth: [ ]
      tags:
        - Project GitHub repo
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      responses:
        '200':
          description: 'Retrieves tags from GitHub repo'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GitTagResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/{project-id}/github-repo/release-notes:
    post:
      summary: 'Generate release notes'
      security:
        - bearerAuth: [ ]
      tags:
        - Project GitHub repo
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GithubGeneratedReleaseNotesRequest'
      responses:
        '200':
          description: 'Release notes generated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GithubGeneratedReleaseNotesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/{project-id}/releases:
    post:
      summary: 'Create release'
      security:
        - bearerAuth: []
      tags:
        - Releases
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseCreateRequest'
      responses:
        '200':
          description: 'Release created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseResponse'
        '400':
              $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
              $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
              $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
              $ref: '#/components/responses/NotFoundErrorResponse'
        '422':
              $ref: '#/components/responses/UnprocesssableEntityResponse'
    get:
      summary: 'List releases'
      security:
        - bearerAuth: []
      tags:
        - Releases
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      responses:
        '200':
          description: 'Releases fetched'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReleaseResponse'
        '401':
              $ref: '#/components/responses/UnauthorizedErrorResponse'
        '404':
              $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/{project-id}/releases/{release-id}:
    get:
      summary: 'Get release by ID'
      security:
        - bearerAuth: []
      tags:
        - Releases
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
        - $ref: '#/components/parameters/ReleaseIdParam'
      responses:
        '200':
          description: 'Release fetched'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseResponse'
        '401':
              $ref: '#/components/responses/UnauthorizedErrorResponse'
        '404':
              $ref: '#/components/responses/NotFoundErrorResponse'
    patch:
      summary: 'Update release'
      security:
        - bearerAuth: []
      tags:
        - Releases
      parameters:
        - $ref: '#/components/parameters/ReleaseIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleasePatchRequest'
      responses:
        '200':
          description: 'Release updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseResponse'
        '401':
              $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
              $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
              $ref: '#/components/responses/NotFoundErrorResponse'
        '422':
              $ref: '#/components/responses/UnprocesssableEntityResponse'
    delete:
      summary: 'Delete release'
      security:
        - bearerAuth: []
      tags:
        - Releases
      parameters:
        - $ref: '#/components/parameters/ReleaseIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseDeleteRequest'
      responses:
        '204':
          description: 'Release deleted'
        '401':
            $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
            $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
            $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/{project-id}/releases/{release-id}/slack-notifications:
    post:
      summary: 'Send release notification to Slack'
      security:
        - bearerAuth: []
      tags:
        - Releases
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
        - $ref: '#/components/parameters/ReleaseIdParam'
      responses:
        '204':
          description: 'Slack notification sent'
        '401':
            $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
            $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
            $ref: '#/components/responses/NotFoundErrorResponse'
  /projects/{project-id}/releases/{release-id}/github-release:
    put:
      summary: 'Upsert GitHub release'
      security:
        - bearerAuth: []
      tags:
        - Releases
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
        - $ref: '#/components/parameters/ReleaseIdParam'
      responses:
        '204':
          description: 'GitHub release created or updated (if release with the same tag already exists)'
        '401':
            $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
            $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
            $ref: '#/components/responses/NotFoundErrorResponse'
  /webhooks/github/tags:
    post:
        summary: 'Endpoint for GitHub webhook to notify about tag deletion'
        tags:
            - Webhooks
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GithubWebhookTagDeletedRequest'
        responses:
            '204':
                description: 'Webhook received'
            '401':
                $ref: '#/components/responses/UnauthorizedErrorResponse'
  /projects/{project-id}/deployments:
    post:
      summary: 'Create deployment record'
      security:
        - bearerAuth: []
      tags:
        - Deployments
      parameters:
        - $ref: '#/components/parameters/ProjectIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentRequest'
      responses:
        '201':
          description: 'Deployment record created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
    get:
        summary: 'List deployment records'
        security:
            - bearerAuth: []
        tags:
            - Deployments
        parameters:
            - $ref: '#/components/parameters/ProjectIdParam'
            - $ref: '#/components/parameters/DeploymentFilterReleaseIdParam'
            - $ref: '#/components/parameters/DeploymentFilterEnvironmentIdParam'
            - $ref: '#/components/parameters/DeploymentFilterLastOnlyParam'
        responses:
          '200':
            description: 'Deployment records fetched'
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/DeploymentResponse'
          '400':
            $ref: '#/components/responses/BadRequestErrorResponse'
          '401':
            $ref: '#/components/responses/UnauthorizedErrorResponse'
          '403':
            $ref: '#/components/responses/ForbiddenErrorResponse'
          '404':
            $ref: '#/components/responses/NotFoundErrorResponse'

components:
  responses:
    UnauthorizedErrorResponse:
      description: 'Authentication was not successful'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    NotFoundErrorResponse:
      description: 'Resource does not exist or user cannot access this resource at all.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    ForbiddenErrorResponse:
      description: 'User has no permission to perform this action.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    UnprocesssableEntityResponse:
      description: 'Validation error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocesssableEntityError'
    BadRequestErrorResponse:
      description: 'The request was invalid or malformed'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
  parameters:
    InvitationToken:
      name: token
      in: query
      description: Invitation token
      required: true
      schema:
        type: string
        example: 09bcb40206b25fe511bfef4d56cbe8c4a141869fc29612fa984b371ef086f5f5
    InvitationIdParam:
      name: invitation-id
      in: path
      description: Invitation ID
      required: true
      schema:
        type: string
        format: uuid
    ProjectIdParam:
      name: project-id
      in: path
      description: Project ID
      required: true
      schema:
        type: string
        format: uuid
    EnvIdParam:
      name: project-id
      in: path
      description: Project ID
      required: true
      schema:
        type: string
        format: uuid
    UserIdParam:
      name: user-id
      in: path
      description: User ID
      required: true
      schema:
        type: string
        format: uuid
    MemberIdParam:
      name: member-id
      in: path
      description: Member ID
      required: true
      schema:
        type: string
        format: uuid
    ReleaseIdParam:
      name: release-id
      in: path
      description: Release ID
      required: true
      schema:
        type: string
        format: uuid
    DeploymentFilterReleaseIdParam:
      name: release-id
      in: query
      description: Release ID
      required: false
      schema:
        type: string
        format: uuid
    DeploymentFilterEnvironmentIdParam:
      name: environment-id
      in: query
      description: Environment ID
      required: false
      schema:
        type: string
        format: uuid
    DeploymentFilterLastOnlyParam:
      name: last_only
      in: query
      description: Fetch only last deployment
      required: false
      schema:
        type: boolean
  schemas:
    UnprocesssableEntityError:
      description: 'Validation error'
      type: object
      properties:
        errorCode:
          type: string
          example: '422'
        errorMessage:
          type: string
          example: 'validation error'
        errorData:
          type: object
          properties:
            field1:
              type: string
              example: "Validation error"
            field2:
              type: string
              example: "Validation error"
            object1:
              type: object
              properties:
                field1:
                  type: string
                  example: "Validation error"
    BadRequestError:
      type: object
      properties:
        errorCode:
          type: string
          example: '400'
        errorMessage:
          type: string
          example: "The request is malformed or contains invalid syntax."
    NotFoundError:
      type: object
      properties:
        errorCode:
          type: string
          example: '404'
        errorMessage:
          type: string
          example:  'Resource not found.'
    UnauthorizedError:
      type: object
      properties:
        errorCode:
          type: string
          example: '401'
        errorMessage:
          type: string
          example: 'JWT token is missing or invalid.'
    ForbiddenError:
      type: object
      properties:
        errorCode:
          type: string
          example: '403'
        errorMessage:
          type: string
          example:  'You do not have permission to perform this action.'
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
          example: jan@zabloudil.cz
        name:
          type: string
          example: 'Jan Zabloudil'
        avatar_image_url:
          type: string
        role:
          type: string
          example: admin
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - email
        - name
        - avatar_image_url
        - is_admin
        - created_at
        - updated_at
    ProjectRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Awesome project'
        slack_channel_id:
          type: string
          example: 'C01B2PZQX1H'
        release_notification_config:
          type: object
          properties:
            message:
              type: string
              default: ""
              example: "Hey, we have just released new version of our backend app!"
            show_project_name:
              type: boolean
              default: false
            show_release_title:
              type: boolean
              default: false
            show_release_notes:
              type: boolean
              default: false
            show_last_deployment:
              type: boolean
              default: false
            show_source_code:
              type: boolean
              default: false
      required:
        - name
    ProjectResponse:
      allOf:
        - $ref: '#/components/schemas/ProjectRequest'
        - type: object
          properties:
            id:
              type: string
              format: uuid
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
          required:
            - id
            - created_at
            - updated_at
    ProjectMemberRole:
      type: object
      properties:
        project_role:
          type: string
          enum:
            - editor
            - viewer
            - owner
    ProjectMemberResponse:
        allOf:
          - $ref: '#/components/schemas/ProjectMemberRole'
          - type: object
            properties:
              user_id:
                type: string
                format: uuid
              name:
                type: string
                example: 'John Doe'
              email:
                type: string
                format: email
                example: 'test@test.tt'
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
        required:
          - user_id
          - name
          - email
          - project_role
          - created_at
          - updated_at
    ProjectInvitationRequest:
      allOf:
        - $ref: '#/components/schemas/ProjectMemberRole'
        - type: object
          properties:
            email:
              type: string
              format: email
          required:
            - email
    ProjectInvitationResponse:
      allOf:
        - $ref: '#/components/schemas/ProjectInvitationRequest'
        - type: object
          properties:
            id:
              type: string
              format: uuid
            status:
              type: string
              enum:
                - pending
                - accepted_awaiting_registration
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
      required:
        - id
        - status
        - created_at
        - updated_at
    EnvironmentRequest:
      type: object
      properties:
        name:
          type: string
        service_url:
          type: string
      required:
        - name
    EnvironmentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        service_url:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - created_at
        - updated_at
    ProjectGithubRepoRequest:
      type: object
      properties:
        github_repo_url:
          type: string
          format: url
          example: "htttp://github.com/owner/repo"
      required:
        - github_repo_url
    ProjectGithubRepoResponse:
      type: object
      properties:
        github_repo_url:
          type: string
          format: url
          example: "htttp://github.com/owner/repo"
      required:
        - github_repo_url
    GithubGeneratedReleaseNotesRequest:
      type: object
      properties:
        git_tag_name:
          type: string
          example: "v0.5.0"
        previous_git_tag_name:
          type: string
          example: "v0.4.0"
      required:
        - git_tag_name
    GithubGeneratedReleaseNotesResponse:
      type: object
      properties:
        title:
          type: string
        notes:
          type: string
    ReleaseCreateRequest:
      type: object
      properties:
        release_title:
          type: string
          example: "V 0.1.1"
        release_notes:
          type: string
          example: "Logging improved"
        git_tag_name:
          type: string
          example: "v0.0.1"
      required:
        - release_title
        - git_tag_name
    ReleasePatchRequest:
      type: object
      properties:
        release_title:
          type: string
          example: "V 0.1.1"
        release_notes:
          type: string
          example: "Logging improved"
    ReleaseDeleteRequest:
      type: object
      properties:
        delete_github_release:
          type: boolean
          default: false
    ReleaseResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        release_title:
          type: string
          example: "V 0.1.1"
        release_notes:
          type: string
          example: "Improved logging"
        git_tag_name:
          type: string
          example: "v0.0.1"
        git_tag_url:
          type: string
          format: url
          example: "https://github.com/owner/repo/releases/tag/v0.0.1"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - release_title
        - release_notes
        - git_tag_name
        - git_tag_url
        - created_at
        - updated_at
    GitTagResponse:
      type: object
      properties:
        name:
          type: string
          example: "v0.0.1"
      required:
        - name
    Settings:
      type: object
      properties:
        organization_name:
          type: string
          example: 'STRV'
        default_release_message:
          type: string
          example: 'Hi everyone,I am thrilled to announce new release!'
        slack:
          type: object
          properties:
            enabled:
              type: boolean
            token:
              type: string
              example: 'xoxo-123456789012-1234567890123-AbCdEfGhIjKlMnOpQrStUvWxYz'
        github:
          type: object
          properties:
            enabled:
              type: boolean
            token:
              type: string
              example: 'ghp_abcdefgh1234567890ijklmnopqrstuvwx'
            webhook_secret:
              type: string
              example: 'secret'
    GithubWebhookTagDeletedRequest:
      type: object
      properties:
        ref:
          type: string
          example: "v0.0.1"
        ref_type:
          type: string
          example: "tag"
        repository:
          type: object
          properties:
            full_name:
              type: string
              example: "owner/repo"
    DeploymentRequest:
      type: object
      properties:
        environment_id:
          type: string
          format: uuid
        release_id:
          type: string
          format: uuid
      required:
        - environment_id
        - release_id
    DeploymentResponse:
        type: object
        properties:
          id:
            type: string
            format: uuid
          release_id:
            type: string
            format: uuid
          release_title:
            type: string
            example: "V 0.1.1"
          environment_id:
            type: string
            format: uuid
          environment_name:
            type: string
            example: "Production"
          environment_service_url:
            type: string
            example: "https://www.example.com"
          deployed_by_user_id:
            type: string
            format: uuid
          deployed_at:
            type: string
            format: date-time
        required:
            - id
            - environment_id
            - release_id
            - created_at
            - updated_at
            - deployed_by_user_id
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
